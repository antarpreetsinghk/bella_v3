name: Cost Monitoring & Performance

on:
  schedule:
    # Run daily at 9 AM UTC (daily cost check)
    - cron: '0 9 * * *'
    # Run every 6 hours (performance monitoring)
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of check to run'
        required: true
        default: 'both'
        type: choice
        options:
        - both
        - cost
        - performance

env:
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ubuntu
  AWS_REGION: ca-central-1
  MONTHLY_BUDGET: 50.0

jobs:
  cost-monitoring:
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'both' || github.event.inputs.check_type == 'cost' || github.event_name == 'schedule'

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Check AWS costs
      run: |
        # Get current month costs
        CURRENT_MONTH=$(date +%Y-%m)
        LAST_MONTH=$(date -d "last month" +%Y-%m)

        echo "üí∞ Cost Analysis for Bella V3"
        echo "=============================="

        # EC2 costs
        EC2_COST=$(aws ce get-cost-and-usage \
          --time-period Start=${CURRENT_MONTH}-01,End=$(date +%Y-%m-%d) \
          --granularity MONTHLY \
          --metrics BlendedCost \
          --group-by Type=DIMENSION,Key=SERVICE \
          --filter file://<(echo '{"Dimensions":{"Key":"SERVICE","Values":["Amazon Elastic Compute Cloud - Compute"]}}') \
          --query 'ResultsByTime[0].Groups[0].Metrics.BlendedCost.Amount' \
          --output text 2>/dev/null || echo "0")

        echo "üñ•Ô∏è  EC2 Cost (Current Month): \$${EC2_COST}"

        # EBS costs
        EBS_COST=$(aws ce get-cost-and-usage \
          --time-period Start=${CURRENT_MONTH}-01,End=$(date +%Y-%m-%d) \
          --granularity MONTHLY \
          --metrics BlendedCost \
          --group-by Type=DIMENSION,Key=SERVICE \
          --filter file://<(echo '{"Dimensions":{"Key":"SERVICE","Values":["Amazon Elastic Block Store"]}}') \
          --query 'ResultsByTime[0].Groups[0].Metrics.BlendedCost.Amount' \
          --output text 2>/dev/null || echo "0")

        echo "üíæ EBS Cost (Current Month): \$${EBS_COST}"

        # Calculate total AWS cost
        TOTAL_AWS_COST=$(echo "${EC2_COST} + ${EBS_COST}" | bc -l)
        echo "üíµ Total AWS Cost: \$${TOTAL_AWS_COST}"

        # Budget check
        BUDGET_PERCENTAGE=$(echo "scale=1; ${TOTAL_AWS_COST} / ${MONTHLY_BUDGET} * 100" | bc -l)
        echo "üìä Budget Usage: ${BUDGET_PERCENTAGE}% of \$${MONTHLY_BUDGET}"

        # Alert if over 80% of budget
        if (( $(echo "${BUDGET_PERCENTAGE} > 80" | bc -l) )); then
          echo "‚ö†Ô∏è  WARNING: Cost is over 80% of monthly budget!"
          echo "COST_ALERT=true" >> $GITHUB_ENV
        fi

        # Save costs for comparison
        echo "EC2_COST=${EC2_COST}" >> $GITHUB_ENV
        echo "EBS_COST=${EBS_COST}" >> $GITHUB_ENV
        echo "TOTAL_AWS_COST=${TOTAL_AWS_COST}" >> $GITHUB_ENV
        echo "BUDGET_PERCENTAGE=${BUDGET_PERCENTAGE}" >> $GITHUB_ENV

    - name: Create cost report
      run: |
        cat << EOF > cost-report.md
        # üí∞ Bella V3 Cost Report - $(date +%Y-%m-%d)

        ## Current Month Costs
        - **EC2 (t4g.micro)**: \$${EC2_COST}
        - **EBS Storage**: \$${EBS_COST}
        - **Total AWS**: \$${TOTAL_AWS_COST}

        ## Budget Analysis
        - **Monthly Budget**: \$${MONTHLY_BUDGET}
        - **Usage**: ${BUDGET_PERCENTAGE}%
        - **Remaining**: \$$(echo "${MONTHLY_BUDGET} - ${TOTAL_AWS_COST}" | bc -l)

        ## Cost Optimization Status
        - ‚úÖ Single EC2 instance (vs ECS cluster)
        - ‚úÖ SQLite database (vs RDS)
        - ‚úÖ Local Redis (vs ElastiCache)
        - ‚úÖ Target: ~\$25/month for 50 calls/day

        ---
        Generated by GitHub Actions on $(date)
        EOF

    - name: Upload cost report
      uses: actions/upload-artifact@v4
      with:
        name: cost-report-$(date +%Y%m%d)
        path: cost-report.md

  performance-monitoring:
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'both' || github.event.inputs.check_type == 'performance' || github.event_name == 'schedule'

    steps:
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/bella-key.pem
        chmod 600 ~/.ssh/bella-key.pem
        ssh-keyscan -H ${{ env.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Check system performance
      run: |
        ssh -i ~/.ssh/bella-key.pem -o StrictHostKeyChecking=no \
          ${{ env.EC2_USER }}@${{ env.EC2_HOST }} << 'EOF'
          echo "üñ•Ô∏è  System Performance Check - $(date)"
          echo "======================================"

          # CPU and Memory usage
          echo "üíª CPU & Memory:"
          top -bn1 | grep "Cpu(s)" | awk '{print "CPU Usage: " $2}'
          free -h | grep "Mem:" | awk '{print "Memory Usage: " $3 "/" $2 " (" $3/$2*100 "%)"}'

          # Disk usage
          echo ""
          echo "üíæ Disk Usage:"
          df -h / | tail -1 | awk '{print "Root: " $3 "/" $2 " (" $5 ")"}'

          # Docker container stats
          echo ""
          echo "üê≥ Container Performance:"
          docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}" || echo "Docker not running"

          # Application health
          echo ""
          echo "ü©∫ Application Health:"
          curl -s http://localhost:8000/healthz | jq '.' 2>/dev/null || echo "Health check failed"

          # Check application logs for errors
          echo ""
          echo "üîç Recent Error Logs:"
          docker compose -f ~/bella_v3/docker-compose.cost-optimized.yml logs app --tail=10 | grep -i error || echo "No recent errors"

          # Database size (SQLite)
          echo ""
          echo "üóÑÔ∏è  Database Size:"
          if [ -f ~/bella_v3/data/bella.db ]; then
            du -h ~/bella_v3/data/bella.db
          else
            echo "Database file not found"
          fi
        EOF

    - name: Run application tests
      run: |
        ssh -i ~/.ssh/bella-key.pem -o StrictHostKeyChecking=no \
          ${{ env.EC2_USER }}@${{ env.EC2_HOST }} << 'EOF'
          cd ~/bella_v3

          echo "üß™ Application Tests"
          echo "==================="

          # Test Twilio webhook
          echo "üìû Testing Twilio webhook:"
          WEBHOOK_RESPONSE=$(curl -s -w "%{http_code}" -X POST http://localhost:8000/twilio/voice \
            -d "CallSid=test-$(date +%s)&From=+15551234567" \
            -H "Content-Type: application/x-www-form-urlencoded")

          if [[ "${WEBHOOK_RESPONSE: -3}" == "200" ]]; then
            echo "‚úÖ Twilio webhook working"
          else
            echo "‚ùå Twilio webhook failed: ${WEBHOOK_RESPONSE: -3}"
          fi

          # Test admin dashboard
          echo "üñ•Ô∏è  Testing admin dashboard:"
          ADMIN_RESPONSE=$(curl -s -w "%{http_code}" http://localhost:8000/)
          if [[ "${ADMIN_RESPONSE: -3}" == "200" ]]; then
            echo "‚úÖ Admin dashboard accessible"
          else
            echo "‚ùå Admin dashboard failed: ${ADMIN_RESPONSE: -3}"
          fi

          # Test API docs
          echo "üìö Testing API documentation:"
          DOCS_RESPONSE=$(curl -s -w "%{http_code}" http://localhost:8000/docs)
          if [[ "${DOCS_RESPONSE: -3}" == "200" ]]; then
            echo "‚úÖ API documentation accessible"
          else
            echo "‚ùå API documentation failed: ${DOCS_RESPONSE: -3}"
          fi
        EOF

  alert-on-issues:
    needs: [cost-monitoring, performance-monitoring]
    runs-on: ubuntu-latest
    if: always() && (needs.cost-monitoring.result == 'failure' || needs.performance-monitoring.result == 'failure')

    steps:
    - name: Create issue for failures
      uses: actions/github-script@v7
      with:
        script: |
          const title = `üö® Bella V3 Monitoring Alert - ${new Date().toISOString().split('T')[0]}`;
          const body = `
          ## Monitoring Alert

          **Date**: ${new Date().toISOString()}
          **Cost Monitoring**: ${{ needs.cost-monitoring.result }}
          **Performance Monitoring**: ${{ needs.performance-monitoring.result }}

          ### Action Required
          - [ ] Check AWS costs and budget usage
          - [ ] Verify EC2 instance performance
          - [ ] Review application logs
          - [ ] Test application endpoints

          ### Quick Diagnosis
          \`\`\`bash
          # Connect to EC2
          ssh -i bella-deployment-key.pem ubuntu@${process.env.EC2_HOST}

          # Check containers
          docker compose -f bella_v3/docker-compose.cost-optimized.yml ps

          # Check logs
          docker compose -f bella_v3/docker-compose.cost-optimized.yml logs app
          \`\`\`

          *This issue was automatically created by GitHub Actions monitoring.*
          `;

          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['monitoring', 'alert', 'production']
          });
name: Deploy Bella V3 Cost-Optimized

on:
  push:
    branches: [ main, production ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

env:
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ubuntu
  SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
  AWS_REGION: ca-central-1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run security checks
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        safety check --json > safety-report.json || true

    - name: Run tests
      env:
        DATABASE_URL: "postgresql+asyncpg://bella_user:test_password@localhost:5432/bella_test_db"
        POSTGRES_PASSWORD: "test_password"
        BELLA_API_KEY: "test_key"
        OPENAI_API_KEY: "test_key"
        TWILIO_ACCOUNT_SID: "test_sid"
        TWILIO_AUTH_TOKEN: "test_token"
        TWILIO_PHONE_NUMBER: "+15551234567"
        GOOGLE_CALENDAR_ENABLED: "false"
        APP_ENV: "testing"
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=term

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          bandit-report.json
          safety-report.json
          coverage.xml

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    # Allow manual deploy bypass with [skip-tests] in commit message
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production') && (needs.test.result == 'success' || contains(github.event.head_commit.message, '[skip-tests]'))

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/bella-key.pem
        chmod 600 ~/.ssh/bella-key.pem

        # More robust SSH key setup with retries and error handling
        echo "Testing SSH connectivity to ${{ env.EC2_HOST }}..."

        # Try ssh-keyscan with timeout and retries
        for i in {1..3}; do
          echo "Attempt $i: Running ssh-keyscan..."
          if timeout 30 ssh-keyscan -H ${{ env.EC2_HOST }} >> ~/.ssh/known_hosts 2>/dev/null; then
            echo "‚úÖ SSH keyscan successful on attempt $i"
            break
          else
            echo "‚ùå SSH keyscan failed on attempt $i"
            if [ $i -eq 3 ]; then
              echo "üîß Adding manual host key acceptance as fallback..."
              echo "Host ${{ env.EC2_HOST }}" >> ~/.ssh/config
              echo "    StrictHostKeyChecking no" >> ~/.ssh/config
              echo "    UserKnownHostsFile /dev/null" >> ~/.ssh/config
            else
              echo "‚è≥ Waiting 10 seconds before retry..."
              sleep 10
            fi
          fi
        done

        # Verify SSH key format
        echo "üîç Verifying SSH key format..."
        if ssh-keygen -l -f ~/.ssh/bella-key.pem; then
          echo "‚úÖ SSH key format is valid"
        else
          echo "‚ùå SSH key format issue detected"
          exit 1
        fi

    - name: Deploy to EC2
      env:
        ECR_REGISTRY: 291878986264.dkr.ecr.ca-central-1.amazonaws.com
        ECR_REPOSITORY: bella-v3
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Stop containers first to release file locks
        echo "üõë Stopping existing containers..."
        ssh -i ~/.ssh/bella-key.pem \
          -o StrictHostKeyChecking=no \
          -o ConnectTimeout=30 \
          -o ServerAliveInterval=60 \
          -o ServerAliveCountMax=3 \
          ${{ env.EC2_USER }}@${{ env.EC2_HOST }} \
          "cd ~/bella_v3 && docker compose -f docker-compose.cost-optimized.yml down || true"

        # Copy project files to EC2 (including Dockerfile for building)
        echo "üìÅ Syncing project files to EC2..."
        rsync -avz --delete \
          --exclude='.git/' \
          --exclude='node_modules/' \
          --exclude='*.log' \
          --exclude='.env.local' \
          --exclude='data/' \
          -e "ssh -i ~/.ssh/bella-key.pem -o StrictHostKeyChecking=no -o ConnectTimeout=30" \
          ./ ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:~/bella_v3/

        # Build on EC2 (native ARM64) and push to ECR
        echo "üî® Building and pushing to ECR..."
        ssh -i ~/.ssh/bella-key.pem \
          -o StrictHostKeyChecking=no \
          -o ConnectTimeout=30 \
          -o ServerAliveInterval=60 \
          -o ServerAliveCountMax=10 \
          ${{ env.EC2_USER }}@${{ env.EC2_HOST }} << EOF
          cd ~/bella_v3

          # Configure AWS CLI for ECR access
          export AWS_ACCESS_KEY_ID='${{ secrets.AWS_ACCESS_KEY_ID }}'
          export AWS_SECRET_ACCESS_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}'
          export AWS_DEFAULT_REGION='${{ env.AWS_REGION }}'

          # Login to ECR
          echo "üîê Logging into ECR..."
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
            docker login --username AWS --password-stdin $ECR_REGISTRY

          # Clean up old images to save space
          echo "üßπ Cleaning up old images..."
          docker system prune -f || true

          # Build image natively on ARM64 EC2
          echo "üî® Building Docker image natively on ARM64..."
          docker build -f Dockerfile.cost-optimized \
            -t bella-v3:latest \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .

          # Push to ECR for future deployments
          echo "üì§ Pushing to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "‚úÖ Build and push completed successfully"
        EOF

        # Start containers on EC2
        echo "üöÄ Starting application containers..."
        ssh -i ~/.ssh/bella-key.pem \
          -o StrictHostKeyChecking=no \
          -o ConnectTimeout=30 \
          -o ServerAliveInterval=60 \
          -o ServerAliveCountMax=5 \
          ${{ env.EC2_USER }}@${{ env.EC2_HOST }} \
          "cd ~/bella_v3 && \
           export AWS_ACCESS_KEY_ID='${{ secrets.AWS_ACCESS_KEY_ID }}' && \
           export AWS_SECRET_ACCESS_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}' && \
           echo 'üöÄ Starting containers...' && \
           docker compose -f docker-compose.cost-optimized.yml up -d --force-recreate && \
           echo '‚è≥ Waiting for services to start...' && \
           sleep 30 && \
           echo 'üóÑÔ∏è Running database migrations...' && \
           docker compose -f docker-compose.cost-optimized.yml exec -T app alembic upgrade head"

        # Health check on EC2
        echo "ü©∫ Running health checks..."
        ssh -i ~/.ssh/bella-key.pem \
          -o StrictHostKeyChecking=no \
          -o ConnectTimeout=30 \
          -o ServerAliveInterval=60 \
          -o ServerAliveCountMax=5 \
          ${{ env.EC2_USER }}@${{ env.EC2_HOST }} \
          "cd ~/bella_v3 && \
           echo 'ü©∫ Running health check...' && \
           for i in {1..12}; do \
             if curl -f http://localhost:8000/healthz; then \
               echo '‚úÖ Health check passed' && exit 0; \
             fi; \
             echo 'Attempt '\$i'/12 failed, waiting 10s...' && sleep 10; \
           done && \
           echo '‚ùå Health check failed after 2 minutes' && \
           docker compose -f docker-compose.cost-optimized.yml logs app --tail=20 && \
           exit 1"

        echo "‚úÖ Deployment completed successfully!"

    - name: Verify deployment
      run: |
        echo "üîç Verifying deployment status..."
        ssh -i ~/.ssh/bella-key.pem \
          -o StrictHostKeyChecking=no \
          -o ConnectTimeout=30 \
          ${{ env.EC2_USER }}@${{ env.EC2_HOST }} << 'EOF'
          cd ~/bella_v3

          echo "üîç Container Status:"
          docker compose -f docker-compose.cost-optimized.yml ps

          echo "ü©∫ Health Checks:"
          curl -s http://localhost:8000/healthz | jq '.'
          curl -s http://localhost:8000/readyz | jq '.'

          echo "üìä Resource Usage:"
          docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}"
        EOF

    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "‚úÖ Deployment to production successful!"
          echo "üåê Application URL: http://${{ env.EC2_HOST }}:8000"
          echo "ü©∫ Health Check: http://${{ env.EC2_HOST }}:8000/healthz"
        else
          echo "‚ùå Deployment failed!"
          exit 1
        fi

  cleanup:
    needs: [test, build-and-deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Setup SSH key for cleanup
      if: needs.build-and-deploy.result == 'success'
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/bella-key.pem
        chmod 600 ~/.ssh/bella-key.pem

        # Robust SSH setup for cleanup
        echo "Setting up SSH for cleanup..."
        if ! timeout 30 ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts 2>/dev/null; then
          echo "‚ö†Ô∏è SSH keyscan failed, using fallback config"
          echo "Host ${{ secrets.EC2_HOST }}" >> ~/.ssh/config
          echo "    StrictHostKeyChecking no" >> ~/.ssh/config
        fi

    - name: Cleanup old Docker images
      if: needs.build-and-deploy.result == 'success'
      run: |
        echo "üßπ Cleaning up old Docker images..."
        ssh -i ~/.ssh/bella-key.pem \
          -o StrictHostKeyChecking=no \
          -o ConnectTimeout=30 \
          ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
          # Remove old Docker images to save space
          docker image prune -f
          docker volume prune -f

          echo "üßπ Cleanup completed"
        EOF